use crate::syntax::*;
use std::rc::Rc;
use std::str::FromStr;

grammar;

Ctor: Ctor = {
    "Nil" => Ctor::Nil,
    "Cons" => Ctor::Cons,
    "Tup" => Ctor::Tup,
}

Dtor: Dtor = {
    "hd" => Dtor::Hd,
    "tl" => Dtor::Tl,
    "fst" => Dtor::Fst,
    "snd" => Dtor::Snd,
}

Label: Label = {
    "label" <label: Var> "{" <term: Term> "}" => Label { label, term: Rc::new(term) }
}

Goto: Goto = {
    "goto" "(" <term: Term> ";" <target: Var> ")" => Goto { term: Rc::new(term), target },
}

Let: Let = {
    "let" <variable: Var> "=" <t1: Term> "in" <t2: Term> => Let { variable, bound_term: Rc::new(t1), in_term: Rc::new(t2)},
}

Lam: Lam = {
    "\\" <variable: Var> "=>" <t: Term> => Lam { variable, body: Rc::new(t)},
}

App: App = {
    <function: Term1> <argument: Term> => App { function: Rc::new(function), argument: Rc::new(argument) }
}

pub Term1: Term = {
    <n: Num> => Term::Lit(n),
    <v: Var> => Term::Var(v),
    "(" <t: Term> ")" => t,
    <l: Label> => l.into(),
    <g: Goto> => g.into(),
}

pub Term: Term = {
    <n: Num> => Term::Lit(n),
    <v: Var> => Term::Var(v),
    "(" <t: Term> ")" => t,
    <l: Let> => l.into(),
    <l: Label> => l.into(),
    <g: Goto> => g.into(),
    <l: Lam> => l.into(),
    <a: App> => a.into(),
}

Num: i64 = {
    <s: r"[0-9]+"> => i64::from_str(s).unwrap()
}

Var: String = {
    // TODO: Think of regexp for vars :)
    <s: r"[x-z]"> => s.to_string()
}
